
    WITH user_weights AS (
    SELECT distinct user_id, weight, projected_weight
    FROM (
            SELECT
              user_id
              ,LAST_VALUE(projected_weight) OVER(partition by user_id order by period_from ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as projected_weight
      ,LAST_VALUE(weight) OVER(partition by user_id order by period_from ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) as weight
            FROM `firebird-data-project.nielseniq.weights`)
    ),
    target_users AS (
      SELECT DISTINCT w.user_id, w.weight, w.projected_weight
      FROM user_weights w
      INNER JOIN (
          SELECT DISTINCT items.user_id
          FROM `firebird-data-project.nielseniq.items_tickets_parsed` tickets
          right JOIN `firebird-data-project.nielseniq.items_extended` items
            ON tickets.order_id = items.order_id AND tickets.item_id = items.item_id
          WHERE (REGEXP_CONTAINS(event_name, r'(?i)\ball things go\b'))
AND tickets.MERCHANT_NAME in ('AXS','Front Gate Tickets','Live Nation','Ticketmaster','SeatGeek','See Tickets','StubHub','TickPick','TicketWeb','TodayTix','Vivid Seats')
    AND tickets.event_date BETWEEN '2025-01-01' AND '2025-12-31'  -- <-- date filter added here
      ) b ON w.user_id = b.user_id
    ),
    target_merchant_agg AS (
      SELECT
        merchant_name,
        SUM(user_count) AS unique_users,
        SUM(order_total*projected_weight) AS weighted_dollars,
        SUM(projected_weight) AS weighted_counts
      FROM
      (SELECT bu.user_id
        ,ie.merchant_name
        ,COUNT(distinct ie.user_id) as user_count
        ,MAX(projected_weight) as projected_weight
        ,sum(item_quantity) as item_quantity
        ,sum(item_price) as item_price
        ,sum(CASE
            WHEN item_price IS NOT NULL THEN item_quantity * item_price
            ELSE order_total
          END) as order_total
        FROM `firebird-data-project.nielseniq.items_extended` ie
        JOIN target_users bu ON ie.user_id = bu.user_id
        group by 1,2) user_merchant_weights
      GROUP BY merchant_name
    ),
    all_users AS (
      SELECT DISTINCT w.user_id, w.projected_weight
      FROM user_weights w
    ),
    all_merchant_agg AS (
      SELECT
        merchant_name,
        SUM(user_count) AS unique_users,
        SUM(order_total*projected_weight) AS weighted_dollars,
        SUM(projected_weight) AS weighted_counts
      FROM
      (SELECT au.user_id
        ,ie.merchant_name
        ,COUNT(distinct ie.user_id) as user_count
        ,MAX(projected_weight) as projected_weight
        ,sum(item_quantity) as item_quantity
        ,sum(item_price) as item_price
        ,sum(CASE
            WHEN item_price IS NOT NULL THEN item_quantity * item_price
            ELSE order_total
          END) as order_total
        FROM `firebird-data-project.nielseniq.items_extended` ie
        JOIN all_users au ON ie.user_id = au.user_id
        group by 1,2) user_merchant_weights
      GROUP BY merchant_name
    ),
    final AS (
      SELECT
        b.merchant_name,
        b.unique_users AS target_users,
        b.weighted_dollars AS target_weighted_dollars,
        b.weighted_counts AS target_weighted_counts,
        a.unique_users AS all_users,
        a.weighted_dollars AS all_weighted_dollars,
        a.weighted_counts AS all_weighted_counts,
        ((b.weighted_counts/153020.641331)/(a.weighted_counts/226892934.952962)) AS Index,
        (b.weighted_dollars / CASE WHEN a.weighted_dollars>0 THEN a.weighted_dollars ELSE 0.01 END) AS dollars_ratio,
        (b.weighted_counts*1.0 / a.weighted_counts) AS counts_ratio,
        RANK() OVER(partition by b.merchant_name order by (b.unique_users/153020.641331)/(a.unique_users/226892934.952962) desc) as merchant_rank_top,
        RANK() OVER(partition by b.merchant_name order by (b.unique_users/153020.641331)/(a.unique_users/226892934.952962) asc) as merchant_rank_bottom
      FROM target_merchant_agg b
      JOIN all_merchant_agg a
      ON b.merchant_name = a.merchant_name
    )
    SELECT *
    FROM final
    ORDER BY merchant_name, merchant_rank_top ASC
